"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    inbox(NId: ID @eq): InboxReceiver
        @field(resolver: "InboxQuery@detail")
        @protect

    inboxes(
        search: String @builder(method: "App\\Models\\InboxReceiver@search")
        filter: FilterInput @builder(method: "App\\Models\\InboxReceiver@filter")
    ): [InboxReceiver!]!
        @builder(method: "App\\Models\\InboxReceiver@owner")
        @orderBy(column: "ReceiveDate", direction: DESC)
        @paginate(type: CONNECTION)
        @protect

    inboxHistory(NId: ID @eq): [InboxReceiver!]!
        @all
        @builder(method: "App\\Models\\InboxReceiver@groupByGIRId")
        @orderBy(column: "ReceiveDate", direction: DESC)
        @protect

    me: People
        @field(resolver: "AccountQuery@profile") @protect
}

type Mutation {
    login(input: LoginInput): AuthPayload
        @field(resolver: "AuthMutator@login")
}

type People {
    id: ID! @rename(attribute: "PeopleId")
    name: String @rename(attribute: "PeopleName")
    email: String @rename(attribute: "Email")
    username: String @rename(attribute: "PeopleUsername")
    employeeNumber: String @rename(attribute: "NIP")
    classRank: String @rename(attribute: "Golongan")
    role: Role @belongsTo
    position: String @rename(attribute: "PeoplePosition")
    avatar: String
}

type Role {
    id: ID! @rename(attribute: "RoleId")
    name: String! @rename(attribute: "RoleName")
    desc: String! @rename(attribute: "RoleDesc")
    rolecode: Rolecode @belongsTo
}

type Rolecode {
    id: ID! @rename(attribute: "rolecode_id")
    name: String! @rename(attribute: "rolecode_name")
}

input LoginInput {
    username: String!
    password: String!
}

type AuthPayload {
    message: String
    access_token: String
    token_type: String
    expires_in: Int
}

type DocumentType {
    id: String! @rename(attribute: "JenisId")
    name: String! @rename(attribute: "JenisName")
    content: String @rename(attribute: "Isi")
}

type DocumentUrgency {
    id: String! @rename(attribute: "UrgensiId")
    name: String! @rename(attribute: "UrgensiName")
}

input FilterInput {
    sources: String
    types: String
    urgencies: String
    statuses: String
}

type Inbox {
    id: ID! @rename(attribute: "NId")
    archiveUnitId: Int @rename(attribute: "CreatedBy")
    source: String @rename(attribute: "Pengirim")
    date: DateTime @rename(attribute: "NTglReg")
    fromName: String @rename(attribute: "Namapengirim")
    fromOrg: String @rename(attribute: "Instansipengirim")
    about: String @rename(attribute: "Hal")
    type: DocumentType @belongsTo
    urgency: DocumentUrgency! @belongsTo
    documentFile: String @rename(attribute: "document_file")
}

type InboxReceiver {
    inboxId: String! @rename(attribute: "NId")
    date: DateTime! @rename(attribute: "ReceiveDate")
    fromId: Int @rename(attribute: "From_Id")
    toId: String @rename(attribute: "To_Id")
    message: String @rename(attribute: "Msg")
    receiverAs: String @rename(attribute: "ReceiverAs")
    receiveStatus: String @rename(attribute: "StatusReceive")
    toIdMessage: String @rename(attribute: "To_Id_Message")
    status: Int @rename(attribute: "Status")
    inboxDetail: Inbox @with
    sender: People @with
}

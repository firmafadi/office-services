type InboxReceiver {
    id: ID!
    inboxId: String! @rename(attribute: "NId")
    groupId: String! @rename(attribute: "GIR_Id")
    date: DateTime! @rename(attribute: "ReceiveDate")
    fromId: Int @rename(attribute: "From_Id")
    toId: String @rename(attribute: "To_Id")
    message: String @rename(attribute: "Msg")
    receiverAs: String @rename(attribute: "ReceiverAs")
    receiverAsLabel: String @rename(attribute: "receiver_as_label")
    receiveStatus: String @rename(attribute: "StatusReceive")
    toIdMessage: String @rename(attribute: "To_Id_Message")
    isForwarded: Int @rename(attribute: "Status")
    message: String @rename(attribute: "Msg")
    inboxDetail: Inbox @belongsTo
    sender: People @belongsTo
    purpose: [InboxReceiver]
    receiver: People @belongsTo
    inboxDisposition: InboxDisposition @belongsTo
    isEndForward: Boolean @field(resolver: "App\\GraphQL\\Types\\InboxReceiverType@isEndForward")
    draftDetail: Draft @belongsTo
}

input FilterInput {
    sources: String
    types: String
    urgencies: String
    statuses: String
    forwarded: String
    folder: String
    receiverTypes: String
    scope: ScopeType
}

input ForwardInput {
    inboxId: String!
    receiversIds: String!
    message: String
    action: ProposedTypes
    urgency: DispositionUrgency
    dispositionType: String
}

enum ScopeType {
    REGIONAL @enum(value: "REGIONAL")
    INTERNAL @enum(value: "INTERNAL")
}

#import inbox.graphql
#import people.graphql
#import inboxDisposition.graphql
#import draft.graphql
